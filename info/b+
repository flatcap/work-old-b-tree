Balanced tree is an well studied structure, they are more robust in
their performance but at the same time management and balancing
algorithms become more complex. The B+Tree structure has been used on
databases indexing structures for a long time. This structure provided
databases with a scalable and fast manner to access their records. The +
sign means that the B-Tree is a modified version of the original that:

    * Place all keys at the leaves.
    * Leaves nodes can be linked together.
    * Internal nodes and leaves can be of different sizes.
    * Never needs to change parent if a key in a leaf is deleted.
    * Makes sequential operations easier and cheaper.

B+Trees

<http://www.linuxgazette.com/issue55/misc/florido/btreetexto.png>
B+Tree diagram: the leaf node's keys are ordered within the tree
improving scan times, since the scan is no longer sequential. Leaf nodes
are chained using pointers to each other.

The B+tree structure has been used on databases indexing structures for
a long time. This structure provided databases with a scalable and fast
manner to access their records. B+tree stands for Balanced Tree. The +
sign means that the Btree is a modified version of the original Btree,
or more precisely, consists of maintaining pointers from each leaf node
to the next, in order not to sacrifice sequential accesses. As Btrees
and B+Trees have been inherited from database technology, we are going
to use a database analogy to explain them.

The B+trees have two different types of nodes: the internal nodes and
the leaf nodes. Both of them consist of sets of pairs like (key,
pointer), ordered by the key value in an ascending manner and a final
pointer which does not have a corresponding key. Whereas the internal
node pointers are used to point to others' internal or leaf nodes, the
leaf node pointers point to the final information directly. Every single
pair's key is used to organise the information within the B+Tree. In
databases, each record has a key field, a field where the value is used
to distinguish that record from the same kind of records. Btrees take
advantage of that key to index database records for better access
times.

[In the diagram, the keys are file names. The bottom row above the red
boxes contains a key for every file in the directory: these are the leaf
nodes. Above these are the internal nodes, keys that have been chosen by
the system to make finding other keys faster. -Ed.]

As we said earlier, an internal node pair (key, pointer) is used to
point out either another internal node or a final leaf node. In both
cases, the key that comes with the pointer will be greater than all the
keys stored in the target node. Therefore, records with an equal key
value to a certain pair's should be addressed by the next pair within
the node. This is the main reason for a final pointer with no
corresponding key to exist. Notice that once a key is used within a
pair, there should be another pointer to address the records with that
key value. That final pointer, is used in the leaf nodes to point to the
next. That way, we can still visit the contents organised sequentially.

B+Trees also have to be balanced. That means the length of the path
taking us from the tree's root to any leaf node should always be the
same. Moreover, the nodes within a BTree must contain a minimum number
of pairs in order to exist. Whenever a node's content gets below that
minimum, the pairs contained would be shifted to another existing node.

In order to locate a specific record, we would do the following. Let's
suppose we are looking for a record with a certain key, "K". We would
begin at the root node, and then begin sequentially scanning the keys
stored within. We scan throughout that node until we found a key that
was greater than "K". Then we go to the node (internal or leaf; we don't
know yet) pointed by the accompanying pointer. Once there, if we were
taken to another internal node, we repeat the same operation. Finally,
we get directed to a leaf node, where we scan sequentially until we
found the desired key "K". As fewer blocks have to be retrieved to get
the desired one, this technique is of lower complexity than sequential
scanning, where in the worst case, we should visit all the entries.
